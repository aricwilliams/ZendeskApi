using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Api.AricsNotes
{
    public class AricNotes
    {
        //Lets make DTO'S (data transfer objects) yaayyy!!!!
        // we have a model that represent the domain of our application & model that represents the data handeld by our api are seperate conserns and must be handled separately. if not we would break the api for users when we modify fields from our domain model (our model for the project)

        //we use auto mapper to convert objects from diffrent models 
        

        //when trying to submit a ticket through post request... dont submit an id... this is auto generated by Identity... if you try to do it, it will raise an error because the primary key column is set to auto-incrament... & Identity insert is set to off... for more info see -> https://appuals.com/how-to-fix-the-error-cannot-insert-explicit-value-for-identity-column-in-table-when-identity_insert-is-set-to-off/
   
        //make a console app


        //**********BEST PRACTICES *********************
        //not having the db context directly in the controller 
        //giving to much information on API, can be manipulated into an attack 

        //you dont want the data models sent out... they model our data.  so use the concept of abstraction. make something that is relative to what we want sent out
        //this is overposting, prevent user from submitting data that could be harmful to our system 
        //so in essisnce DTO'S is collecting one data type and converting to another data type. USE AUTO MAPPER TO SHORTEN THIS UP
        //NOTE when mapping make sure you get data types correct , cant map multiple things to one thing. if its multiple map to a list
        //dtos should never refrence a model type. in the attributes it should only refrence another dto

        //validation 

        //SOLID
        //Single responsibility, one class, on respnsibility

        //repository, lets take some of that business logic out of the controler. its just to recive the request, route, return data
    }
}
